(function () {
  angular.module('app', [
    'app.libraries',
    'app.constants',
    'app.routes',
    'app.config',
    'app.home',
    'app.core',
    'app.widgets',
    'app.header',
    'app.selectList',
    'app.usuario',
    'app.asignatura',
    'app.ubicacion',
    'app.datos',
    'app.configuracion',
    'app.progtema',
    'app.programar',
    'app.misclases',
    'app.clasesAsings',
    'app.clasesprog',
    'app.clasesprofesor',
    'app.clasealumno',
    'app.chat',
    'app.archivo'
  ]).run(run);
  run.$inject = [
    '$window',
    '$rootScope',
    '$location',
    '$state',
    '$stateParams'
  ];
  function run($window, $rootScope, $location, $state, $stateParams) {
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.$on('$locationChangeStart', function (event, next, current) {
      var publicPages = [
          '/login',
          '/CrearUsuario'
        ];
      var restrictedPage = publicPages.indexOf($location.path()) === -1;
      var usuario = null;
      try {
        usuario = JSON.parse($window.localStorage.usuario);
      } catch (e) {
      }
      if (restrictedPage && usuario == null) {
        $location.path('/login');
      }
    });
  }
}());
(function () {
  angular.module('app.libraries', [
    'ui.router',
    'ui.bootstrap',
    'ngMaterial',
    'ngSanitize',
    'ngAnimate',
    'datatables',
    'ui.select',
    'toastr',
    'pascalprecht.translate',
    'angular-google-analytics'
  ]);
}());
(function () {
  angular.module('app.config', []).config(config).run([
    'Analytics',
    function (Analytics) {
    }
  ]);
  function config($httpProvider, $mdThemingProvider, $translateProvider, $windowProvider, AnalyticsProvider) {
    AnalyticsProvider.setAccount('UA-112315764-1');
    AnalyticsProvider.setHybridMobileSupport(true);
    $mdThemingProvider.theme('dark-grey').backgroundPalette('blue-grey').dark();
    $mdThemingProvider.theme('dark-orange').backgroundPalette('deep-orange').dark();
    $mdThemingProvider.theme('dark-purple').backgroundPalette('deep-purple').dark();
    $mdThemingProvider.theme('dark-blue').backgroundPalette('blue').dark();
    $mdThemingProvider.theme('dark-lime').backgroundPalette('lime').dark();
    $mdThemingProvider.theme('dark-teal').backgroundPalette('teal').dark();
    $mdThemingProvider.theme('dark-amber').backgroundPalette('amber').dark();
    $mdThemingProvider.theme('dark-brown').backgroundPalette('brown').dark();
    $mdThemingProvider.theme('dark-indigo').backgroundPalette('indigo').dark();
    $mdThemingProvider.theme('dark-pink').backgroundPalette('pink').dark();
    $translateProvider.fallbackLanguage('en');
    $translateProvider.registerAvailableLanguageKeys([
      'en',
      'es'
    ], {
      'en_*': 'en',
      'es_*': 'es'
    });
    $translateProvider.translations('en', {
      LNG_INICIAR_CLASE: 'Start Class',
      LNG_INICIAR_SESION: 'LOG IN',
      LNG_REGISTRAR: 'SIGN IN ',
      LNG_USUARIO_LOG: 'User',
      LNG_PASSWORD_LOG: 'Password',
      LNG_USUARIO_LOG_ERROR: 'User is required',
      LNG_PASSWORD_LOG_ERROR: 'Password is required',
      LNG_PROGRAMA_CLASE: 'PROGRAM YOUR CLASS',
      LNG_INICIO: 'Home',
      LNG_DATOS: 'My Data',
      LNG_EDITINFO: 'Edit Information',
      LNG_SAVEINFO: 'Save Information',
      LNG_NOMBREQ: 'Name is required',
      LNG_APELLREQ: 'Surnames are required',
      LNG_EDADREQ: 'Age is required',
      LNG_CORREOREQ: 'Email is required',
      LNG_CORREOINV: 'The mail is invalid',
      LNG_DESCTEMA: 'Theme Description',
      LNG_NOMBRES: 'Names',
      LNG_APELLIDOS: 'Surnames',
      LNG_EDAD: 'Age',
      LNG_CELULAR: 'Cell Phone',
      LNG_TELEFONO: 'Phone',
      LNG_CORREO: 'Email',
      LNG_PAIS: 'Country',
      LNG_PAISES: 'Countrys',
      LNG_DEPART: 'Department',
      LNG_DEPARTS: 'Departments',
      LNG_CIUDAD: 'City',
      LNG_CIUDADES: 'Citys',
      LNG_USERNAME: 'Username',
      LNG_ACTIVO: 'Active',
      LGN_PROFESOR: 'Teacher',
      LGN_ALUMNO: 'Student',
      LGN_ACCIONES: 'Actions',
      LGN_CONFIRM: 'Confirm',
      LGN_GUARDAR: 'Save',
      LGN_CANCEL: 'Cancel',
      LGN_DESCRIP: 'Description',
      LNG_ADMIN_TBL: 'Admin',
      LNG_CREAR: 'Create',
      LNG_EDITAR: 'Edit',
      LNG_ACEPTAR: 'Ok',
      LNG_EDITSUCS: 'Was successfully edited',
      LNG_CREATESUCS: 'Was created successfully',
      LNG_ERROR: 'An error occurred in the process',
      LNG_MSJ_1: 'Passwords do not match',
      LNG_MSJ_2: 'Age is not valid',
      LNG_MSJ_3: 'Username already exists',
      LNG_MSJ_4: 'You must select a role for the user',
      LNG_MSJ_5: 'An item with that name already exists',
      LNG_MSJ_6: 'You must enter the fields *',
      LNG_MSJ_7: 'Start time must be less than the final',
      LNG_MSJ_8: 'A department for this country already exists',
      LNG_MSJ_9: 'This city already exists for this department',
      LNG_BORRAR: 'Do you want to delete this record?',
      LNG_BORRARSUC: 'Successfully deleted',
      LNG_MATERIAS: 'Subjects',
      LNG_MATERIA: 'Subject',
      LNG_TEMAS: 'Themes',
      LNG_TEMA: 'Theme',
      LNG_FECHA: 'Date',
      LNG_HI: 'Start Time',
      LNG_HF: 'End Time',
      LNG_TH: 'Total Hours',
      LNG_TT: 'Total',
      LNG_CODIGO: 'Code',
      LNG_PRECIO: 'Price',
      LNG_PRECHORA: 'Price Time',
      LNG_ALUMNO: 'Student',
      LNG_ADMIN: 'Administrator',
      LNG_CLASES_MENU: 'my classes',
      LNG_USUARIOS_MENU: 'Users',
      LNG_ASIGN_MENU: 'Subjects',
      LNG_PROGTEMA_MENU: 'Schedule Theme',
      LNG_UBICACION_MENU: 'Location',
      LGN_CONFIG_MENU: 'Configuration',
      LNG_HORA: 'Hour',
      LNG_TOMAR: 'Take',
      LNG_ENTRE: 'Between',
      LNG_SALIR: 'Exit',
      LNG_CAMBCONTRASENA: 'Change Password',
      LNG_EDADMIN: 'Minimum Age',
      LNG_REPETIR: 'Repeat',
      LNG_PROGTEMA: 'Schedule Theme',
      BUTTON_LANG_EN: 'English',
      BUTTON_LANG_ES: 'Spanish',
      LNG_DISP_CLASS: 'Class Availability',
      LNG_HORAS_OCP: 'Busy Hours',
      LNG_HORAS_DSP: 'Hours Available',
      LNG_MSJ_PC: 'Select the date and the hours you want to take',
      LNG_MSJ_PCERR: 'This date does not have available hours',
      LNG_CERRAR: 'Close',
      LNG_CONFIRM: 'Confirm',
      LNG_MSJCONFIRM: 'The class was created successfully',
      LNG_CLASEPROG: 'Scheduled'
    });
    $translateProvider.translations('es', {
      LNG_INICIAR_CLASE: 'Iniciar Clase',
      LNG_INICIAR_SESION: 'INICIAR SESI\xd2N',
      LNG_REGISTRAR: 'REGISTRARSE',
      LNG_USUARIO_LOG: 'Usuario',
      LNG_PASSWORD_LOG: 'Contrase\xf1a',
      LNG_USUARIO_LOG_ERROR: 'El usuario es requerido',
      LNG_PASSWORD_LOG_ERROR: 'La contrase\xf1a es requerida',
      LNG_PROGRAMA_CLASE: 'PROGRAMA TU CLASE',
      LNG_INICIO: 'Inicio',
      LNG_DATOS: 'Mis Datos',
      LNG_EDITINFO: 'Editar Informaci\xf3n',
      LNG_SAVEINFO: 'Guardar Informaci\xf3n',
      LNG_NOMBREQ: 'El nombre es requerido',
      LNG_APELLREQ: 'Los apellidos son requeridos',
      LNG_EDADREQ: 'La edad es requerida',
      LNG_CORREOREQ: 'El correo es requerido',
      LNG_CORREOINV: 'El correo es invalido',
      LNG_DESCTEMA: 'Descripci\xf3n del Tema',
      LNG_NOMBRES: 'Nombres',
      LNG_APELLIDOS: 'Apellidos',
      LNG_EDAD: 'Edad',
      LNG_CELULAR: 'Celular',
      LNG_TELEFONO: 'Telefono',
      LNG_CORREO: 'Correo',
      LNG_PAIS: 'Pais',
      LNG_PAISES: 'Paises',
      LNG_DEPART: 'Departamento',
      LNG_DEPARTS: 'Departamentos',
      LNG_CIUDAD: 'Ciudad',
      LNG_CIUDADES: 'Ciudades',
      LNG_USERNAME: 'Username',
      LNG_ACTIVO: 'Activo',
      LGN_PROFESOR: 'Profesor',
      LGN_ALUMNO: 'Alumno',
      LGN_ACCIONES: 'Acciones',
      LGN_CONFIRM: 'Confirmar',
      LGN_GUARDAR: 'Guardar',
      LGN_CANCEL: 'Cancelar',
      LGN_DESCRIP: 'Descripci\xf3n',
      LNG_ADMIN_TBL: 'Admin',
      LNG_CREAR: 'Crear',
      LNG_EDITAR: 'Editar',
      LNG_ACEPTAR: 'Aceptar',
      LNG_EDITSUCS: 'Se edit\xf3 con ex\xedto',
      LNG_CREATESUCS: 'Se creo con ex\xedto',
      LNG_ERROR: 'Ocurrio un error en el proceso',
      LNG_MSJ_1: 'Las contrase\xf1as no coinciden',
      LNG_MSJ_2: 'La edad no es valida',
      LNG_MSJ_3: 'El username ya existe',
      LNG_MSJ_4: 'Debe seleccionar un rol para el usuario',
      LNG_MSJ_5: 'Ya existe un item con ese nombre',
      LNG_MSJ_6: 'Debe ingresar los campos *',
      LNG_MSJ_7: 'La hora inicial debe ser menor a la final',
      LNG_MSJ_8: 'Ya existe un departamento para este pais',
      LNG_MSJ_9: 'Ya existe esta ciudad para este deparatamento',
      LNG_BORRAR: '\xbfDesea eliminar este registro?',
      LNG_BORRARSUC: 'Eliminado exitosamente',
      LNG_MATERIAS: 'Materias',
      LNG_MATERIA: 'Materia',
      LNG_TEMAS: 'Temas',
      LNG_TEMA: 'Tema',
      LNG_FECHA: 'Fecha',
      LNG_HI: 'Hora Inicio',
      LNG_HF: 'Hora Final',
      LNG_TH: 'Total Horas',
      LNG_TT: 'Total',
      LNG_CODIGO: 'Codigo',
      LNG_PRECIO: 'Precio',
      LNG_PRECHORA: 'Precio Hora',
      LNG_ALUMNO: 'Alumno',
      LNG_ADMIN: 'Administrador',
      LNG_CLASES_MENU: 'Mis Clases',
      LNG_USUARIOS_MENU: 'Usuarios',
      LNG_ASIGN_MENU: 'Asignaturas',
      LNG_PROGTEMA_MENU: 'Programar Temas',
      LNG_UBICACION_MENU: 'Ubicaci\xf3n',
      LGN_CONFIG_MENU: 'Configuraci\xf3n',
      LNG_HORA: 'Hora',
      LNG_TOMAR: 'Tomar',
      LNG_ENTRE: 'Entre',
      LNG_SALIR: 'Salir',
      LNG_CAMBCONTRASENA: 'Cambiar Contrase\xf1a',
      LNG_EDADMIN: 'Edad Minima',
      LNG_REPETIR: 'Repetir',
      LNG_PROGTEMA: 'Programar Tema',
      BUTTON_LANG_EN: 'Ingl\xe9s',
      BUTTON_LANG_ES: 'Espa\xf1ol',
      LNG_DISP_CLASS: 'Disponibilidad de Clases',
      LNG_HORAS_OCP: 'Horas Ocupadas',
      LNG_HORAS_DSP: 'Horas Disponibles',
      LNG_MSJ_PC: 'Selecciona la fecha y las horas que quieres tomar',
      LNG_MSJ_PCERR: 'Esta fecha no tiene horas disponibles',
      LNG_CERRAR: 'Cerrar',
      LNG_CONFIRM: 'Confirmar',
      LNG_MSJCONFIRM: 'La clase se creo exitosamente',
      LNG_CLASEPROG: 'Programadas'
    });
    $translateProvider.useSanitizeValueStrategy('escape');
    var idioma = $windowProvider.$get().localStorage.idioma;
    $translateProvider.preferredLanguage(idioma != null ? idioma : 'es');
    $mdThemingProvider.theme('indigo').primaryPalette('indigo').accentPalette('indigo').warnPalette('red');
    $mdThemingProvider.theme('green').primaryPalette('green').accentPalette('green').warnPalette('red');
    $mdThemingProvider.alwaysWatchTheme(true);
    $httpProvider.defaults.timeout = 5000;
    $httpProvider.interceptors.push('AuthInterceptor');
  }
}());
(function () {
  angular.module('app.routes', []).config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.when('', '/login');
    $urlRouterProvider.when('/', '/login');
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app', {
      abstract: true,
      url: '/app',
      templateUrl: 'components/core/core.view.html'
    }).state('app.home', {
      url: '/home',
      templateUrl: 'components/home/home.view.html',
      controller: 'HomeController',
      controllerAs: '$ctrl',
      data: {
        moduleTitle: 'Incio',
        moduleName: 'home',
        show: false
      }
    }).state('login', {
      url: '/login',
      templateUrl: 'components/login/login.view.html',
      controller: 'LoginController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.constants', []).constant('API_URL', 'http://localhost:61122').constant('API_URL_ADMIN', 'http://localhost:55594/admin');
}());
(function () {
  angular.module('app.widgets', ['app.header']);
}());
(function () {
  angular.module('app.asignatura', [
    'app.asignatura.materia',
    'app.asignatura.tema'
  ]);
}());
(function () {
  angular.module('app.clasesprofesor', []);
}());
(function () {
  angular.module('app.clasesprog', []);
}());
(function () {
  angular.module('app.configuracion', []);
}());
(function () {
  angular.module('app.core', []);
}());
(function () {
  angular.module('app.home', []);
}());
(function (window, angular, undefined) {
  angular.module('app.misclases', []);
}(window, window.angular));
(function () {
  angular.module('app.datos', []);
}());
(function () {
  angular.module('app.progtema', []);
}());
(function () {
  angular.module('app.ubicacion', [
    'app.ubicacion.pais',
    'app.ubicacion.departamento',
    'app.ubicacion.ciudad'
  ]);
}());
(function () {
  angular.module('app.usuario', []);
}());
(function () {
  angular.module('app.asignatura.materia', []);
}());
(function () {
  angular.module('app.asignatura.tema', []);
}());
(function () {
  angular.module('app.clasealumno', []);
}());
(function () {
  angular.module('app.clasesprofesor', []);
}());
(function () {
  angular.module('app.programar', []);
}());
(function () {
  angular.module('app.ubicacion.ciudad', []);
}());
(function () {
  angular.module('app.ubicacion.departamento', []);
}());
(function () {
  angular.module('app.ubicacion.pais', []);
}());
(function () {
  angular.module('app.clasesAsings', []);
}());
(function () {
  angular.module('app.selectList', []);
}());
(function () {
  angular.module('app.header', []);
}());
(function () {
  angular.module('app.chat', []);
}());
(function () {
  angular.module('app.archivo', []);
}());
(function () {
  angular.module('app.header', []).directive('appHeader', appHeader);
  appHeader.$inject = [
    '$state',
    '$translate'
  ];
  function appHeader($state, $scope) {
    return {
      restrict: 'E',
      replace: true,
      scope: { title: '=' },
      controller: AppHeaderController,
      controllerAs: '$ctrl',
      bindToController: true,
      templateUrl: 'components/widgets/app-header/app-header.template.html'
    };
    function AppHeaderController($scope, $window, $state, $uibModal, appHeaderFactory, $translate) {
      var self = this;
      var currentProfile = $window.localStorage.perfilid;
      self.logout = logout;
      var usuario = JSON.parse($window.localStorage.usuario);
      self.currentUser = usuario.username;
      self.currentAdministrador = usuario.administrador;
      self.currentProfesor = usuario.profesor;
      self.currentAlumno = usuario.alumno;
      self.changePassword = changePassword;
      self.changeLanguage = changeLanguage;
      self.language = $window.localStorage.idioma;
      activate();
      function activate() {
        if (self.currentAdministrador == true) {
          self.showAdministrador = true;
        }
        if (self.currentProfesor == true) {
          self.showProfesor = true;
        }
        if (self.currentAlumno == true) {
          self.showAlumno = true;
        }
      }
      menu();
      menucontent();
      submenu_alumno();
      submenu_profesor();
      submenu_admin();
      var contador = 1;
      function menu() {
        $('.open_list').click(function () {
          if (contador == 1) {
            $('nav').animate({ left: '0' });
            contador = 0;
          } else {
            contador = 1;
            $('nav').animate({ left: '-100%' });
          }
        });
      }
      ;
      function changeLanguage(language) {
        $window.localStorage.setItem('idioma', language);
        self.language = language;
        $translate.use(self.language);
      }
      function menucontent() {
        $('.margin-body').click(function () {
          if (contador == 0) {
            contador = 1;
            $('nav').animate({ left: '-100%' });
          }
        });
      }
      function submenu_alumno() {
        $('.submenu_alumno').click(function () {
          $(this).children('.children_alumno').slideToggle();
        });
      }
      function submenu_profesor() {
        $('.submenu_profesor').click(function () {
          $(this).children('.children_profesor').slideToggle();
        });
      }
      function submenu_admin() {
        $('.submenu_admin').click(function () {
          $(this).children('.children_admin').slideToggle();
        });
      }
      function logout() {
        $translate.use(self.language);
        $state.go('login');
      }
      ;
      function changePassword() {
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/ChangePassword.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md'
          });
      }
    }
    ;
  }
  function ModalController($uibModalInstance) {
    var self = this;
    self.password = null;
    self.password2 = null;
    self.cancel = cancel;
    function cancel() {
      $uibModalInstance.close();
    }
  }
  ;
}());
(function () {
  angular.module('app.clasesprofesor').factory('ClasesProfesorFactory', ClasesProfesorFactory);
  ClasesProfesorFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ClasesProfesorFactory(API_URL, $http, $q) {
    return {};
  }
}());
(function () {
  angular.module('app.clasesprog').factory('ClasesprogFactory', ClasesprogFactory);
  ClasesprogFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ClasesprogFactory(API_URL, $http, $q) {
    return {};
  }
}());
(function () {
  angular.module('app.configuracion').factory('ConfigFactory', ConfigFactory);
  ConfigFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ConfigFactory(API_URL, $http, $q) {
    return {
      getConfig: getConfig,
      putConfig: putConfig
    };
    function getConfig() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Config',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function putConfig(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Config',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app').factory('AuthInterceptor', AuthInterceptor);
  AuthInterceptor.$inject = ['AuthTokenFactory'];
  function AuthInterceptor(AuthTokenFactory) {
    return { request: addToken };
    function addToken(config) {
      var token = AuthTokenFactory.getToken();
      if (token) {
        config.headers = config.headers || {};
        config.headers.Authorization = 'Bearer ' + token;
      }
      return config;
    }
  }
}());
(function () {
  angular.module('app').factory('AuthTokenFactory', AuthTokenFactory);
  AuthTokenFactory.$inject = ['$window'];
  function AuthTokenFactory($window) {
    var store = $window.localStorage, key = 'auth-token', keyUrl = 'url-token';
    return {
      getToken: getToken,
      setToken: setToken
    };
    function getToken() {
      return store.getItem(key);
    }
    function setToken(data) {
      if (data) {
        store.setItem(key, data.md5);
        store.setItem('usuario', JSON.stringify(data));
        if (store.idioma == null) {
          store.setItem('idioma', 'es');
        }
      } else {
        store.removeItem(key);
        store.removeItem('usuario');
      }
    }
  }
}());
(function () {
  angular.module('app').factory('LoginFactory', LoginFactory);
  LoginFactory.$inject = [
    '$http',
    'API_URL',
    'AuthTokenFactory',
    '$q'
  ];
  function LoginFactory($http, API_URL, AuthTokenFactory, $q) {
    return {
      login: login,
      logout: logout,
      getUser: getUser,
      recovery: recovery,
      sendUrlToken: sendUrlToken,
      updatePassword: updatePassword
    };
    function login(username, password) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/login',
          method: 'Get',
          params: {
            'usuario': username,
            'clave': password
          },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (response) {
          resolve(response.data);
          AuthTokenFactory.setToken(response.data);
        }, function (reason) {
          console.log(reason);
          reject(reason);
        });
      });
    }
    function logout() {
      $http.defaults.headers.common.Authorization = '';
      AuthTokenFactory.setToken();
    }
    function getUser() {
      if (AuthTokenFactory.getToken()) {
        console.log('authorize');
        return $http.get(API_URL + '/app');
      } else {
        return $q.reject({ data: 'client hasn\'t auth token' });
      }
    }
    function recovery(email) {
      return $http({
        url: API_URL + '/user/recovery-password/',
        method: 'POST',
        data: { 'email': email },
        headers: { 'Content-Type': 'application/json' }
      }).then(function (response) {
        return response;
      });
    }
    function sendUrlToken(token) {
      return $http({
        url: API_URL + '/user/check-recovery-token',
        method: 'POST',
        params: { 'token': token },
        headers: { 'Content-Type': 'application/json' }
      }).then(function (response) {
        return response;
      });
    }
    function updatePassword(newPassword) {
      return $http({
        url: API_URL + '/user/update-password',
        method: 'PUT',
        data: { 'password': newPassword },
        headers: { 'Content-Type': 'application/json' }
      }).then(function (response) {
        return response;
      });
    }
  }
}());
(function () {
  angular.module('app.misclases').factory('claseFactory', claseFactory);
  claseFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function claseFactory(API_URL, $http, $q) {
    return {
      getClasesAlumnos: getClasesAlumnos,
      getClasesProfesor: getClasesProfesor,
      postClase: postClase
    };
    function getClasesAlumnos(hlnusuarioid, activo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Clase',
          method: 'Get',
          params: {
            alumnoid: parseInt(hlnusuarioid),
            activo: activo
          },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getClasesProfesor(profesorid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Clase',
          method: 'Get',
          params: { profesorid: parseInt(profesorid) },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function postClase(clase) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Clase',
          method: 'Post',
          data: clase,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.progtema').factory('ProgTemaFactory', ProgTemaFactory);
  ProgTemaFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ProgTemaFactory(API_URL, $http, $q) {
    return {
      getProgTemas: getProgTemas,
      getProgTema: getProgTema,
      crearProgTema: crearProgTema,
      editarProgTema: editarProgTema,
      deleteProgTema: deleteProgTema
    };
    function getProgTemas() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/progtema',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getProgTema(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/ProgTema',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { hlnprogtemaid: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function crearProgTema(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/ProgTema',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarProgTema(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/ProgTema',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deleteProgTema(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/ProgTema',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.usuario').factory('UsuarioFactory', UsuarioFactory);
  UsuarioFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function UsuarioFactory(API_URL, $http, $q) {
    return {
      getUsuario: getUsuario,
      getUsuarios: getUsuarios,
      crearUsuario: crearUsuario,
      editarUsuario: editarUsuario,
      deleteUsuario: deleteUsuario,
      editPassword: editPassword
    };
    function getUsuarios() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/usuario',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getUsuario(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/usuario',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { id: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function crearUsuario(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/usuario',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarUsuario(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/usuario',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editPassword(password, hlnusuarioid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/usuario',
          method: 'PUT',
          params: {
            password: password,
            hlnusuarioid: hlnusuarioid
          },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deleteUsuario(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/usuario',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.asignatura.materia').factory('materiaFactory', materiaFactory);
  materiaFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function materiaFactory(API_URL, $http, $q) {
    return {
      getMaterias: getMaterias,
      getMateria: getMateria,
      crearMateria: crearMateria,
      editarMateria: editarMateria,
      deleteMateria: deleteMateria
    };
    function getMaterias() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Materia',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (promise) {
          reject(promise);
        });
      });
    }
    function getMateria(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Materia',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { hlnmateriaid: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (promise) {
          reject(promise);
        });
      });
    }
    function crearMateria(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/Materia',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarMateria(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Materia',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (promise) {
          reject(promise);
        });
      });
    }
    function deleteMateria(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Materia',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.asignatura.tema').factory('temaFactory', temaFactory);
  temaFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function temaFactory(API_URL, $http, $q) {
    return {
      getTema: getTema,
      getTemas: getTemas,
      crearTema: crearTema,
      editarTema: editarTema,
      deleteTema: deleteTema,
      getTemasListas: getTemasListas
    };
    function getTemas() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Tema',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getTemasListas(listasok) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Tema',
          method: 'Get',
          params: { listasok: listasok },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getTema(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Tema',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { hlntemaid: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function crearTema(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/Tema',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarTema(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Tema',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deleteTema(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Tema',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.clasealumno').factory('ClaseFactory', ClaseFactory);
  ClaseFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ClaseFactory(API_URL, $http, $q) {
    return {};
  }
}());
(function () {
  angular.module('app.clasesprofesor').factory('ClaseFactory', ClaseFactory);
  ClaseFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ClaseFactory(API_URL, $http, $q) {
    return {};
  }
}());
(function () {
  angular.module('app.programar').factory('ProgramFactory', ProgramFactory);
  ProgramFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function ProgramFactory(API_URL, $http, $q) {
    return { getProgramas: getProgramas };
    function getProgramas() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Programar',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.ubicacion.ciudad').factory('CiudadFactory', CiudadFactory);
  CiudadFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function CiudadFactory(API_URL, $http, $q) {
    return {
      getCiudad: getCiudad,
      getCiudades: getCiudades,
      crearCiudad: crearCiudad,
      editarCiudad: editarCiudad,
      deleteCiudad: deleteCiudad
    };
    function getCiudades() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Ciudad',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getCiudad(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Ciudad',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { hlnciudadid: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function crearCiudad(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/Ciudad',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarCiudad(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Ciudad',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deleteCiudad(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Ciudad',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.ubicacion.departamento').factory('DepartamentoFactory', DepartamentoFactory);
  DepartamentoFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function DepartamentoFactory(API_URL, $http, $q) {
    return {
      getDept: getDept,
      getDepts: getDepts,
      crearDept: crearDept,
      editarDept: editarDept,
      deleteDept: deleteDept
    };
    function getDepts() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Departamento',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getDept(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Departamento',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { hlndepartamentoid: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function crearDept(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/Departamento',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarDept(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Departamento',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deleteDept(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Departamento',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.ubicacion.pais').factory('PaisFactory', PaisFactory);
  PaisFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function PaisFactory(API_URL, $http, $q) {
    return {
      getPais: getPais,
      getPaises: getPaises,
      crearPais: crearPais,
      editarPais: editarPais,
      deletePais: deletePais
    };
    function getPaises() {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Pais',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getPais(id) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Pais',
          method: 'Get',
          headers: { 'Content-Type': 'application/json' },
          params: { hlnpaisid: id }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function crearPais(modelo) {
      return $q(function (resolve, reject) {
        console.log('resolve', resolve);
        console.log('reject', reject);
        $http({
          url: API_URL + '/api/Pais',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function editarPais(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Pais',
          method: 'PUT',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deletePais(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Pais',
          method: 'Delete',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.clasesAsings').factory('clasesAsingsFactory', clasesAsingsFactory);
  clasesAsingsFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function clasesAsingsFactory(API_URL, $http, $q) {
    return {
      getClasesAsings: getClasesAsings,
      getClasesAsingslt: getClasesAsingslt
    };
    function getClasesAsings(hlnprogtemaid, fecha) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/ClasesAsg',
          method: 'Get',
          params: {
            hlnprogtemaid: hlnprogtemaid,
            fecha: fecha
          },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getClasesAsingslt(hlnprogtemaid, fecha) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/ClasesAsg',
          method: 'Get',
          params: {
            hlnprogtemaidlt: hlnprogtemaid,
            fecha: fecha
          },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.selectList').factory('SelectsFactory', SelectsFactory);
  SelectsFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function SelectsFactory(API_URL, $http, $q) {
    return { getListas: getListas };
    function getListas(paises, depts, ciudades, materias, profes, temas) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Listas',
          method: 'Get',
          params: {
            paises: paises,
            depts: depts,
            ciudades: ciudades,
            materias: materias,
            profes: profes,
            temas: temas
          },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.header').factory('appHeaderFactory', appHeaderFactory);
  appHeaderFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function appHeaderFactory(API_URL, $http, $q) {
    return { updatePassword: updatePassword };
    function updatePassword(id, changes) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Login/' + id,
          method: 'PUT',
          data: changes,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    ;
  }
  ;
}());
(function () {
  angular.module('app.chat').factory('chatFactory', chatFactory);
  chatFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function chatFactory(API_URL, $http, $q) {
    return {
      postChat: postChat,
      getChat: getChat
    };
    function postChat(modelo) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Chat',
          method: 'POST',
          data: modelo,
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getChat(hlnclaseid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Chat',
          method: 'GET',
          params: { hlnclaseid: hlnclaseid },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.archivo').factory('archivoFactory', archivoFactory);
  archivoFactory.$inject = [
    'API_URL',
    '$http',
    '$q'
  ];
  function archivoFactory(API_URL, $http, $q) {
    return {
      postFile: postFile,
      getFiles: getFiles,
      DownloadFile: DownloadFile,
      deleteFile: deleteFile
    };
    function postFile(modelo, hlnclaseid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Archivo',
          method: 'POST',
          data: modelo.file,
          params: { hlnclaseid: modelo.hlnclaseid },
          headers: { 'Content-Type': undefined }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function getFiles(hlnclaseid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Archivo',
          method: 'GET',
          params: { hlnclaseid: hlnclaseid },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function DownloadFile(hlnarchivoid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Archivo',
          method: 'GET',
          params: { hlnarchivoid: hlnarchivoid },
          responseType: 'arraybuffer',
          headers: { 'Content-Type': 'application/json; charset=utf-8' }
        }).then(function (promise) {
          console.log('promise', promise);
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
    function deleteFile(hlnarchivoid) {
      return $q(function (resolve, reject) {
        $http({
          url: API_URL + '/api/Archivo',
          method: 'Delete',
          params: { hlnarchivoid: hlnarchivoid },
          headers: { 'Content-Type': 'application/json' }
        }).then(function (promise) {
          resolve(promise);
        }, function (reason) {
          reject(reason);
        });
      });
    }
  }
}());
(function () {
  angular.module('app.asignatura').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.asignatura', {
      url: '/asignaturas',
      templateUrl: 'components/asignatura/asignatura.view.html',
      controller: 'AsignaturaController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.clasesprofesor').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.clasesprofesor', {
      url: '/Clasesprofesor',
      templateUrl: 'components/clasesProfesor/clasesprofesor.view.html',
      controller: 'ClasesProfesorController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.clasesprog').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.clasesprog', {
      url: '/Clasesprog',
      templateUrl: 'components/clasesprog/clasesprog.view.html',
      controller: 'ClasesprogController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.configuracion').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.configuracion', {
      url: '/Configuracion',
      templateUrl: 'components/configuracion/configuracion.view.html',
      controller: 'ConfigController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.misclases').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.misclases', {
      url: '/misclases',
      templateUrl: 'components/misClases/misClases.view.html',
      controller: 'misclasesController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.datos').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.datos', {
      url: '/misDatos',
      templateUrl: 'components/misDatos/datos.view.html',
      controller: 'DatosController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.progtema').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.progtema', {
      url: '/progtema',
      templateUrl: 'components/progTema/progTema.view.html',
      controller: 'progTemaController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.ubicacion').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.ubicacion', {
      url: '/ubicacion',
      templateUrl: 'components/ubicacion/ubicacion.view.html',
      controller: 'UbicacionController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.usuario').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.usuario', {
      url: '/usuarios',
      templateUrl: 'components/usuario/usuario.view.html',
      controller: 'UsuarioController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.asignatura.materia').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.asignatura.materia', {
      url: '/materias',
      templateUrl: 'components/asignatura/materia/materia.view.html',
      controller: 'MateriaController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.asignatura.tema').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.asignatura.tema', {
      url: '/temas',
      templateUrl: 'components/asignatura/tema/tema.view.html',
      controller: 'TemaController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.clasealumno').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.clase-alumno', {
      url: '/ClaseAlum/:hlnclaseid',
      templateUrl: 'components/clase/alumno/clase.view.html',
      controller: 'ClaseController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.clasesprofesor').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.clase-profesor', {
      url: '/ClaseProf/:hlnclaseid',
      templateUrl: 'components/clase/profesor/clase.view.html',
      controller: 'ClasepController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.ubicacion.ciudad').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.ubicacion.ciudad', {
      url: '/ciudades',
      templateUrl: 'components/ubicacion/ciudad/ciudad.view.html',
      controller: 'CiudadController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.ubicacion.departamento').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.ubicacion.departamento', {
      url: '/departamentos',
      templateUrl: 'components/ubicacion/departamento/departamento.view.html',
      controller: 'DepartamentoController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app.ubicacion.pais').config(config);
  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/login');
    $stateProvider.state('app.ubicacion.pais', {
      url: '/paises',
      templateUrl: 'components/ubicacion/pais/pais.view.html',
      controller: 'PaisController',
      controllerAs: '$ctrl'
    });
  }
}());
(function () {
  angular.module('app').controller('LoginController', LoginController);
  LoginController.$inject = [
    'LoginFactory',
    '$state',
    '$scope',
    '$window'
  ];
  function LoginController(LoginFactory, $state, $scope, $window) {
    var self = this;
    self.login = login;
    self.CrearUsuario = CrearUsuario;
    function CrearUsuario() {
      console.log('Ingreso');
      $state.go('app.usuario');
    }
    function login(user, password) {
      LoginFactory.login(user, password).then(function (response) {
        $state.go('app.home');
      }, handleError);
    }
    initController();
    function initController() {
      LoginFactory.logout();
    }
    function handleError(response) {
      self.handleError = response.data;
      self.loading = false;
      return self.handleError;
    }
  }
}());
(function () {
  angular.module('app.home').controller('HomeController', HomeController);
  HomeController.$inject = [
    '$state',
    '$window',
    'ProgramFactory',
    '$uibModal',
    '$translate',
    'claseFactory',
    '$filter',
    'toastr',
    'clasesAsingsFactory'
  ];
  function HomeController($state, $window, ProgramFactory, $uibModal, $translate, claseFactory, $filter, toastr, clasesAsingsFactory) {
    var self = this;
    self.programas = [];
    self.desctema = desctema;
    self.TakeTema = TakeTema;
    self.oneAtATime = false;
    self.getClasesAsingslt = getClasesAsingslt;
    self.line = [];
    self.fechaconsulta = new Date();
    self.fechamin = new Date();
    self.myInterval = 4000;
    self.slides = [];
    var currIndex = 0;
    var newWidth = 600;
    for (var u = 1; u <= 4; u++) {
      newWidth += u;
      self.slides.push({
        image: '//unsplash.it/' + newWidth + '/300',
        text: [
          'Nice image',
          'Awesome photograph',
          'That is so cool',
          'I love that'
        ][self.slides.length % 4],
        id: currIndex++
      });
    }
    self.status = {
      isCustomHeaderOpen: false,
      isFirstOpen: true,
      isFirstDisabled: false,
      open: true
    };
    var usuario = JSON.parse($window.localStorage.usuario);
    getProgramas();
    function getProgramas() {
      ProgramFactory.getProgramas().then(function (response) {
        var response = response.data;
        self.programas = response;
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall(response);
    }
    function getClasesAsingslt(hlnprogtemaid, fecha, h) {
      if (fecha == undefined || fecha == null || fecha == '') {
        handleError('La fecha no es valida');
      } else {
        self.fechaconsulta = fecha;
        clasesAsingsFactory.getClasesAsingslt(hlnprogtemaid, fecha).then(function (response) {
          h.linetime = response.data;
        }, handleError);
      }
    }
    function desctema(tema, desctema) {
      var titulo = $translate.instant('LNG_DESCTEMA');
      var modalInstance = $uibModal.open({
          animation: true,
          ariaLabelledBy: 'modal-title',
          ariaDescribedBy: 'modal-body',
          templateUrl: './components/widgets/app-modals/TemaDescripcion.html',
          controller: ModalController,
          controllerAs: '$ctrl',
          windowClass: 'u-modalPosition',
          size: 'md',
          resolve: {
            titulo: function () {
              return titulo;
            },
            tema: function () {
              return tema;
            },
            desctema: function () {
              return desctema;
            }
          }
        });
      modalInstance.result.then(function (data) {
      }, function () {
      });
    }
    function TakeTema(tema, materia, horario) {
      var titulo = $translate.instant('LNG_PROGTEMA');
      var modalInstance = $uibModal.open({
          animation: true,
          ariaLabelledBy: 'modal-title',
          ariaDescribedBy: 'modal-body',
          templateUrl: 'components/widgets/app-modals/CreateClase.html',
          controller: ModalTekeTema,
          controllerAs: '$ctrl',
          windowClass: 'u-modalPosition',
          size: 'lg',
          resolve: {
            titulo: function () {
              return titulo;
            },
            tema: function () {
              return tema;
            },
            materia: function () {
              return materia;
            },
            hlnusuarioid: function () {
              return usuario.hlnusuarioid;
            },
            horario: function () {
              return horario;
            },
            handleError: function () {
              return handleError;
            }
          }
        });
      modalInstance.result.then(function (data) {
      }, function () {
      });
    }
  }
}());
function ModalController($uibModalInstance, $scope, titulo, tema, desctema) {
  var self = this;
  self.tema = tema;
  self.desctema = desctema;
  function cancel() {
    $uibModalInstance.close();
  }
}
function ModalTekeTema($uibModalInstance, $scope, $uibModal, titulo, tema, materia, hlnusuarioid, horario, $filter, handleError, clasesAsingsFactory, $translate) {
  var self = this;
  self.tema = tema;
  self.cancel = cancel;
  self.titulo = titulo;
  self.materia = materia;
  self.changehour = changehour;
  self.getHoraAsgs = getHoraAsgs;
  self.linetime = [];
  self.horasAsg = [];
  self.horasLb = [];
  self.disablefield = false;
  self.h = horario;
  self.lastdate = null;
  self.Confirm = Confirm;
  self.preciototal = {
    cantidad: 0,
    prec_total: 0
  };
  self.mensaje = $translate.instant('LNG_MSJ_PC');
  self.mensaje2 = $translate.instant('LNG_MSJ_PCERR');
  self.fechamin = new Date();
  var clase = {
      fecha: null,
      horaini: '',
      horafin: '',
      hlnusuarioid: hlnusuarioid,
      hlnprogtemaid: horario.hlnprogtemaid,
      hlnclaseid: 0,
      canthoras: 0,
      calificacion: 0,
      profesorid: 0,
      precio: 0
    };
  clase.fecha = new Date();
  self.clase = clase;
  getHoraAsg(self.clase.hlnprogtemaid, self.clase.fecha);
  function getHoraAsg(hlnprogtemaid, fecha) {
    clasesAsingsFactory.getClasesAsings(hlnprogtemaid, fecha).then(function (response) {
      self.lastdate = response.data[response.data.length - 1];
      self.horasAsg = response.data.filter(function (item) {
        return item.busy == true;
      });
      self.horasLb = response.data.filter(function (item) {
        return item.busy == false;
      });
      if (self.horasLb.length <= 0) {
        self.clase.horaini = null;
        self.clase.horafin = null;
        self.disablefield = true;
      } else {
        self.clase.horaini = new Date('1970-01-01T' + self.horasLb[0].horaini);
        self.clase.horafin = new Date('1970-01-01T' + self.horasLb[0].horafin);
        self.disablefield = false;
      }
      getClasesAsingslt(hlnprogtemaid, fecha);
      recalcularModal(self.clase.horaini, self.clase.horafin);
    }, handleError);
  }
  function cancel() {
    $uibModalInstance.close();
  }
  function changehour(clase) {
    if (clase.horaini == undefined || clase.horafin == undefined) {
      clase.horaini = new Date('1970-01-01T' + self.horasLb[0].horaini);
      clase.horafin = newHour(clase.horaini, 1);
    } else {
      var hour;
      if (clase.horaini.getHours() < 10) {
        hour = '0' + clase.horaini.getHours() + ':00:00';
        clase.horaini = new Date('1970-01-01T' + hour);
      } else {
        clase.horaini = new Date('1970-01-01T' + clase.horaini.getHours() + ':00:00');
      }
      if (clase.horafin.getHours() < 10) {
        hour = '0' + clase.horafin.getHours() + ':00:00';
        clase.horafin = new Date('1970-01-01T' + hour);
      } else {
        clase.horafin = new Date('1970-01-01T' + clase.horafin.getHours() + ':00:00');
      }
    }
    if (horaigual(clase.horaini, clase.horafin)) {
      clase.horafin = newHour(clase.horaini, 1);
    }
    if (clase.horafin < clase.horaini) {
      clase.horafin = newHour(clase.horaini, 1);
    }
    if (validaHourOcupadas(clase.horaini, clase.horafin)) {
      if (self.horasLb.length == 1) {
        clase.horaini = new Date('1970-01-01T' + self.horasLb[0].horaini);
        clase.horafin = newHour(clase.horaini, 1);
      } else {
        var free = [];
        free = self.horasLb.filter(function (item) {
          var aux = new Date('1970-01-01T' + item.horaini);
          if (aux >= clase.horafin) {
            return item;
          }
        });
        if (free.length == 0) {
          clase.horaini = new Date('1970-01-01T' + self.horasLb[0].horaini);
          clase.horafin = newHour(clase.horaini, 1);
        } else {
          clase.horaini = new Date('1970-01-01T' + free[0].horaini);
          clase.horafin = newHour(clase.horaini, 1);
        }
      }
    }
    recalcularModal(clase.horaini, clase.horafin);
  }
  function OrganizarHora(date) {
    var hora;
    if (date.getHours() < 10) {
      hora = '0' + date.getHours();
    } else {
      hora = date.getHours();
    }
    if (date.getMinutes() < 10) {
      hora = hora + ':0' + date.getMinutes();
    } else {
      hora = hora + ':' + date.getMinutes();
    }
    if (date.getSeconds() < 10) {
      hora = hora + ':0' + date.getSeconds();
    } else {
      hora = hora + ':' + date.getSeconds();
    }
    return hora;
  }
  function newHour(date, hour) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + hour, date.getMinutes(), date.getSeconds());
  }
  function horaigual(hi, hf) {
    try {
      return hi.getTime() === hf.getTime();
    } catch (e) {
      return false;
    }
  }
  function getHoraAsgs(hlnprogtemaid) {
    self.horasAsg = [];
    if (clase.fecha == undefined || clase.fecha == null || clase.fecha == '') {
      clase.fecha = new Date();
    }
    getClasesAsingslt(hlnprogtemaid, clase.fecha);
    getHoraAsg(hlnprogtemaid, clase.fecha);
  }
  function validaHourOcupadas(hi, hf) {
    var h = false;
    console.log('self.horasAsg', self.horasAsg);
    for (i = 0; i < self.horasAsg.length; i++) {
      var shi = new Date('1970-01-01T' + self.horasAsg[i].horaini);
      var shf = new Date('1970-01-01T' + self.horasAsg[i].horafin);
      if (shi.getTime() >= hi.getTime() && shf.getTime() < hf.getTime() || hi.getTime() >= shi.getTime() && hi.getTime() < shf.getTime() || hf.getTime() > shi.getTime() && hf.getTime() < shf.getTime() || hf.getTime() > shi.getTime() && hf.getTime() <= shf.getTime()) {
        h = true;
      }
    }
    return h;
  }
  function getClasesAsingslt(hlnprogtemaid, fecha) {
    if (fecha == undefined || fecha == null || fecha == '') {
      handleError('La fecha no es valida');
    } else {
      self.fechaconsulta = fecha;
      clasesAsingsFactory.getClasesAsingslt(hlnprogtemaid, fecha).then(function (response) {
        self.linetime = response.data;
      }, handleError);
    }
  }
  function recalcularModal(fechaini, fechafin) {
    var cantidad = (fechafin - fechaini) / 1000 / 60 / 60;
    self.preciototal.cantidad = cantidad;
    self.preciototal.prec_total = cantidad * tema.preciohora;
  }
  function Confirm(clase, preciototal) {
    var modalInstance = $uibModal.open({
        animation: true,
        ariaLabelledBy: 'modal-title',
        ariaDescribedBy: 'modal-body',
        templateUrl: 'components/widgets/app-modals/ConfirmClase.html',
        controller: ModalConfirm,
        controllerAs: '$ctrl',
        windowClass: 'u-modalPosition',
        size: 'md',
        resolve: {
          clase: function () {
            return clase;
          },
          preciototal: function () {
            return preciototal;
          },
          tema: function () {
            return self.tema;
          },
          materia: function () {
            return self.materia;
          },
          handleError: function () {
            return handleError;
          }
        }
      });
    modalInstance.result.then(function (data) {
      if (data) {
        cancel();
      }
    }, function () {
    });
  }
}
function ModalConfirm($uibModalInstance, $scope, $filter, claseFactory, $translate, toastr, clase, preciototal, tema, materia, handleError) {
  var self = this;
  self.clase = clase;
  self.preciototal = preciototal;
  self.materia = materia;
  self.tema = tema;
  self.cancel = cancel;
  self.SaveClass = SaveClass;
  self.titulo = $translate.instant('LNG_CONFIRM');
  function cancel(c) {
    $uibModalInstance.close(c);
  }
  function SaveClass(clase) {
    clase.fecha = $filter('date')(clase.fecha, 'yyyy-MM-dd HH:mm:ss Z');
    clase.horaini = $filter('date')(clase.horaini, 'HH:mm:ss');
    clase.horafin = $filter('date')(clase.horafin, 'HH:mm:ss');
    claseFactory.postClase(clase).then(function (response) {
      var response = response.data;
      cancel(true);
      toastr.successhall($translate.instant('LNG_MSJCONFIRM'));
    }, handleError);
  }
}
(function () {
  angular.module('app.usuario').controller('UsuarioController', UsuarioController);
  UsuarioController.$inject = [
    'UsuarioFactory',
    'SelectsFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$translate'
  ];
  function UsuarioController(UsuarioFactory, SelectsFactory, $state, $scope, $uibModal, $mdDialog, toastr, $translate) {
    var self = this;
    self.Usuarios = [];
    self.Usuario = {};
    self.CreateOrEditUsuario = CreateOrEditUsuario;
    self.ChangePassword = ChangePassword;
    getUsuarios();
    getListas();
    function getUsuarios() {
      UsuarioFactory.getUsuarios().then(function (response) {
        var response = response.data;
        self.Usuarios = response.usuarios;
      }, handleError);
    }
    function getListas() {
      SelectsFactory.getListas(true, true, true, false, false, false).then(function (response) {
        var response = response.data;
        self.paises = response.paises;
        self.departamentos = response.depts;
        self.ciudades = response.ciudades;
      }, handleError);
    }
    function handleError(response) {
      if (response.data != null || response.data != '') {
        toastr.errorhall($translate.instant(response.data), 'Error');
      } else {
        toastr.errorhall($translate.instant('LNG_ERROR'), 'Error');
      }
    }
    function ChangePassword(hlnusuarioid) {
      var modalInstance = $uibModal.open({
          animation: true,
          ariaLabelledBy: 'modal-title',
          ariaDescribedBy: 'modal-body',
          templateUrl: 'components/widgets/app-modals/ChangePassword.html',
          controller: ModalPassword,
          controllerAs: '$ctrl',
          windowClass: 'u-modalPosition',
          size: 'md',
          resolve: {
            hlnusuarioid: function () {
              return hlnusuarioid;
            },
            titulo: function () {
              return $translate.instant('LNG_CAMBCONTRASENA');
            },
            handleError: function () {
              return handleError;
            }
          }
        });
      modalInstance.result.then(function (data) {
      }, function () {
      });
    }
    function CreateOrEditUsuario(accion, hlnusuarioid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        var cruser = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LNG_USUARIO_LOG');
        titulo = cruser;
      } else if (accion == 'Editar') {
        var edtuser = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LNG_USUARIO_LOG');
        titulo = edtuser;
      }
      if (hlnusuarioid == null) {
        hlnusuarioid = 0;
      }
      UsuarioFactory.getUsuario(hlnusuarioid).then(function (response) {
        var response = response.data;
        self.Usuario = response;
        self.Usuario.toast = false;
        if (hlnusuarioid == 0) {
          self.Usuario.activo = true;
        }
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditUsuario.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'lg',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
  }
  function ModalController($uibModalInstance, $scope, $http, $translate, toastr, UsuarioFactory, titulo, index, scope, handleError) {
    var self = this;
    self.modelo = scope;
    self.titulo = titulo;
    self.Usuario = scope.Usuario;
    self.Usuarios = scope.Usuarios;
    self.CrearUsuario = CrearUsuario;
    self.editarUsuario = editarUsuario;
    self.cancel = cancel;
    self.scope = scope;
    self.paises = scope.paises;
    self.depts = scope.departamentos;
    self.ciudades = scope.ciudades;
    self.Ciud = Ciud;
    self.Depts = Depts;
    if (self.modelo.Usuario.hlnpaisid == 0) {
      self.paises.selected = null;
    } else {
      self.paises.selected = scope.paises.filter(function (item) {
        return item.Value == self.Usuario.hlnpaisid;
      })[0];
    }
    if (self.modelo.Usuario.hlndepartamentoid == 0) {
      self.depts.selected = null;
    } else {
      self.depts = scope.departamentos.filter(function (item) {
        return item.Group.Name == self.modelo.Usuario.hlnpaisid;
      });
      self.depts.selected = scope.departamentos.filter(function (item) {
        return item.Value == self.modelo.Usuario.hlndepartamentoid;
      })[0];
    }
    if (self.modelo.Usuario.hlnciudadid == 0) {
      self.ciudades.selected = null;
    } else {
      self.ciudades = scope.ciudades.filter(function (item) {
        return item.Group.Name == self.modelo.Usuario.hlndepartamentoid;
      });
      self.ciudades.selected = scope.ciudades.filter(function (item) {
        return item.Value == self.Usuario.hlnciudadid;
      })[0];
    }
    function validaciones(modelo) {
      var val = {
          valida: true,
          data: ''
        };
      if (/^\w+([\.\+\-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,4})+$/.test(modelo.correo) == false) {
        val.valida = false;
        val.data = 'LNG_CORREOINV';
      }
      return val;
    }
    function CrearUsuario(modelo) {
      var val = validaciones(modelo);
      if (val.valida) {
        modelo.hlnpaisid = self.paises.selected.Value;
        modelo.hlndepartamentoid = self.depts.selected.Value;
        modelo.hlnciudadid = self.ciudades.selected.Value;
        UsuarioFactory.crearUsuario(modelo).then(function (response) {
          var response = response.data;
          if (response.valida == true) {
            self.modelo.Usuario = response.modelo;
            self.modelo.Usuario.toast = true;
            self.modelo.Usuarios.push(response.modelo);
            cancel();
            toastr.successhall($translate.instant('LNG_CREATESUCS'));
          } else {
            response.data = response.msj;
            handleError(response);
          }
        }, handleError);
      } else {
        handleError(val);
      }
    }
    function editarUsuario(modelo) {
      var val = validaciones(modelo);
      if (val.valida) {
        modelo.hlnpaisid = self.paises.selected.Value;
        modelo.hlndepartamentoid = self.depts.selected.Value;
        modelo.hlnciudadid = self.ciudades.selected.Value;
        UsuarioFactory.editarUsuario(modelo).then(function (response) {
          var response = response.data;
          if (response.valida == true) {
            self.Usuarios[index] = response.modelo;
            toastr.successhall($translate.instant('LNG_EDITSUCS'));
            cancel();
          } else {
            response.data = response.msj;
            handleError(response);
          }
        }, handleError);
      } else {
        handleError(val);
      }
    }
    function cancel() {
      $uibModalInstance.close();
    }
    function Depts(key) {
      self.depts = scope.departamentos.filter(function (item) {
        return item.Group.Name == key;
      });
    }
    function Ciud(key) {
      self.ciudades = scope.ciudades.filter(function (item) {
        return item.Group.Name == key;
      });
    }
  }
  function ModalPassword($uibModalInstance, $scope, $http, $translate, toastr, UsuarioFactory, hlnusuarioid, titulo, handleError) {
    var self = this;
    self.editPassword = editPassword;
    self.titulo = titulo;
    self.cancel = cancel;
    self.password = null;
    self.password2 = null;
    function cancel() {
      $uibModalInstance.close();
    }
    function editPassword() {
      if (self.password == null || self.password == '' || self.password2 == null || self.password2 == '') {
        toastr.errorhall($translate.instant('LNG_MSJ_6'));
      } else if (self.password != self.password2) {
        toastr.errorhall($translate.instant('LNG_MSJ_1'));
      } else {
        UsuarioFactory.editPassword(self.password, hlnusuarioid).then(function (response) {
          toastr.successhall($translate.instant('LNG_EDITSUCS'));
          cancel();
        }, handleError);
      }
    }
  }
}());
(function () {
  angular.module('app.asignatura').controller('AsignaturaController', AsignaturaController);
  AsignaturaController.$inject = [
    '$stateParams',
    '$state'
  ];
  function AsignaturaController($stateParams, $state) {
    var self = this;
  }
}());
(function () {
  angular.module('app.asignatura.tema').controller('TemaController', TemaController);
  TemaController.$inject = [
    'temaFactory',
    'SelectsFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$translate'
  ];
  function TemaController(temaFactory, SelectsFactory, $state, $scope, $uibModal, $mdDialog, toastr, $translate) {
    var self = this;
    self.temas = [];
    self.tema = {};
    self.CreateOrEditTema = CreateOrEditTema;
    self.showConfirm = showConfirm;
    self.deleteTema = deleteTema;
    getTemas();
    getListas();
    function getTemas() {
      temaFactory.getTemas().then(function (response) {
        self.temas = response.data;
      }, handleError);
    }
    function getListas() {
      SelectsFactory.getListas(false, false, false, true, false, false).then(function (response) {
        var response = response.data;
        self.materias = response.materias;
      }, handleError);
    }
    function deleteTema(modelo, index) {
      temaFactory.deleteTema(modelo).then(function (response) {
        self.temas.splice(index, 1);
        toastr.successhall($translate.instant('LNG_BORRARSUC'));
      }, handleError);
    }
    function CreateOrEditTema(accion, hlntemaid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        titulo = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LNG_TEMA');
      } else if (accion == 'Editar') {
        titulo = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LNG_TEMA');
      }
      if (hlntemaid == null) {
        hlntemaid = 0;
      }
      temaFactory.getTema(hlntemaid).then(function (response) {
        self.tema = response.data;
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditTema.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function showConfirm(ev, modelo, index) {
      var confirm = $mdDialog.confirm({
          onComplete: function afterShowAnimation() {
            var $dialog = angular.element(document.querySelector('md-dialog'));
            var $actionsSection = $dialog.find('md-dialog-actions');
            var $cancelButton = $actionsSection.children()[0];
            var $confirmButton = $actionsSection.children()[1];
            angular.element($confirmButton).addClass('md-raised hbtn-success');
            angular.element($cancelButton).addClass('md-raised hbtn-primary');
            $actionsSection.children[0] = $confirmButton;
            $actionsSection.children[1] = $cancelButton;
          }
        }).title($translate.instant('LNG_BORRAR')).targetEvent(ev).ok($translate.instant('LNG_ACEPTAR')).cancel($translate.instant('LGN_CANCEL')).hasBackdrop(false);
      $mdDialog.show(confirm).then(function () {
        self.deleteTema(modelo, index);
      }, function () {
      });
    }
    ;
  }
  function ModalController($uibModalInstance, $scope, $http, temaFactory, toastr, $translate, titulo, index, scope, handleError) {
    var self = this;
    self.titulo = titulo;
    self.tema = scope.tema;
    ;
    self.temas = scope.temas;
    self.crearTema = crearTema;
    self.editarTema = editarTema;
    self.cancel = cancel;
    self.scope = scope;
    self.materias = scope.materias;
    self.materia = null;
    if (self.tema.hlnmateriaid == 0) {
      self.materias.selected = null;
    } else {
      self.materias.selected = scope.materias.filter(function (item) {
        return item.Value == self.tema.hlnmateriaid;
      })[0];
    }
    function crearTema(modelo) {
      modelo.hlnmateriaid = self.materias.selected.Value;
      temaFactory.crearTema(modelo).then(function (response) {
        self.tema = response.data;
        self.temas.push(response.data);
        cancel();
        toastr.successhall($translate.instant('LNG_CREATESUCS'));
      }, handleError);
    }
    function editarTema(modelo) {
      modelo.hlnmateriaid = self.materias.selected.Value;
      temaFactory.editarTema(modelo).then(function (response) {
        self.temas[index] = response.data;
        cancel();
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
    function cancel() {
      $uibModalInstance.close();
    }
  }
}());
(function () {
  angular.module('app.asignatura.materia').controller('MateriaController', MateriaController);
  MateriaController.$inject = [
    'materiaFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$translate'
  ];
  function MateriaController(materiaFactory, $state, $scope, $uibModal, $mdDialog, toastr, $translate) {
    var self = this;
    self.materias = [];
    self.materia = {};
    self.CreateOrEditMateria = CreateOrEditMateria;
    self.showConfirm = showConfirm;
    self.deleteMateria = deleteMateria;
    getMaterias();
    function getMaterias() {
      materiaFactory.getMaterias().then(function (response) {
        self.materias = response.data;
      }, handleError);
    }
    function deleteMateria(modelo, index) {
      materiaFactory.deleteMateria(modelo).then(function (response) {
        var response = response.data;
        self.materias.splice(index, 1);
        toastr.successhall($translate.instant('LNG_BORRARSUC'));
      }, handleError);
    }
    function CreateOrEditMateria(accion, hlnmateriaid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        titulo = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LNG_MATERIA');
      } else if (accion == 'Editar') {
        titulo = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LNG_MATERIA');
      }
      if (hlnmateriaid == null) {
        hlnmateriaid = 0;
      }
      materiaFactory.getMateria(hlnmateriaid).then(function (response) {
        var response = response.data;
        self.materia = response;
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditMateria.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function showConfirm(ev, modelo, index) {
      var confirm = $mdDialog.confirm({
          onComplete: function afterShowAnimation() {
            var $dialog = angular.element(document.querySelector('md-dialog'));
            var $actionsSection = $dialog.find('md-dialog-actions');
            var $cancelButton = $actionsSection.children()[0];
            var $confirmButton = $actionsSection.children()[1];
            angular.element($confirmButton).addClass('md-raised hbtn-success');
            angular.element($cancelButton).addClass('md-raised hbtn-primary');
            $actionsSection.children[0] = $confirmButton;
            $actionsSection.children[1] = $cancelButton;
          }
        }).title($translate.instant('LNG_BORRAR')).targetEvent(ev).ok($translate.instant('LNG_ACEPTAR')).cancel($translate.instant('LGN_CANCEL')).hasBackdrop(false);
      $mdDialog.show(confirm).then(function () {
        self.deleteMateria(modelo, index);
      }, function () {
      });
    }
    ;
  }
  function ModalController($uibModalInstance, $scope, $http, $translate, materiaFactory, toastr, titulo, index, scope, handleError) {
    var self = this;
    self.titulo = titulo;
    self.scope = scope;
    self.materia = self.scope.materia;
    self.materias = self.scope.materias;
    self.crearMateria = crearMateria;
    self.editarMateria = editarMateria;
    self.cancel = cancel;
    function crearMateria(modelo) {
      materiaFactory.crearMateria(modelo).then(function (response) {
        self.materia = response.data;
        self.materias.push(response.data);
        cancel();
        toastr.successhall($translate.instant('LNG_CREATESUCS'));
      }, handleError);
    }
    function editarMateria(modelo) {
      materiaFactory.editarMateria(modelo).then(function (response) {
        self.materias[index] = response.data;
        cancel();
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
    function cancel() {
      $uibModalInstance.close();
    }
  }
}());
(function () {
  angular.module('app.ubicacion').controller('UbicacionController', UbicacionController);
  UbicacionController.$inject = [
    '$stateParams',
    '$state'
  ];
  function UbicacionController($stateParams, $state) {
    var self = this;
  }
}());
(function () {
  angular.module('app.ubicacion.pais').controller('PaisController', PaisController);
  PaisController.$inject = [
    'PaisFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$translate'
  ];
  function PaisController(PaisFactory, $state, $scope, $uibModal, $mdDialog, toastr, $translate) {
    var self = this;
    self.Paises = [];
    self.Pais = {};
    self.CreateOrEditPais = CreateOrEditPais;
    self.showConfirm = showConfirm;
    self.deletePais = deletePais;
    getPaises();
    function getPaises() {
      PaisFactory.getPaises().then(function (response) {
        self.Paises = response.data;
      }, handleError);
    }
    function deletePais(modelo, index) {
      PaisFactory.deletePais(modelo).then(function (response) {
        self.Paises.splice(index, 1);
        toastr.successhall($translate.instant('LNG_BORRARSUC'));
      }, handleError);
    }
    function CreateOrEditPais(accion, hlnpaisid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        titulo = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LNG_PAIS');
      } else if (accion == 'Editar') {
        titulo = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LNG_PAIS');
      }
      if (hlnpaisid == null) {
        hlnpaisid = 0;
      }
      PaisFactory.getPais(hlnpaisid).then(function (response) {
        self.Pais = response.data;
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditPais.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function showConfirm(ev, modelo, index) {
      var confirm = $mdDialog.confirm({
          onComplete: function afterShowAnimation() {
            var $dialog = angular.element(document.querySelector('md-dialog'));
            var $actionsSection = $dialog.find('md-dialog-actions');
            var $cancelButton = $actionsSection.children()[0];
            var $confirmButton = $actionsSection.children()[1];
            angular.element($confirmButton).addClass('md-raised hbtn-success');
            angular.element($cancelButton).addClass('md-raised hbtn-primary');
            $actionsSection.children[0] = $confirmButton;
            $actionsSection.children[1] = $cancelButton;
          }
        }).title($translate.instant('LNG_BORRAR')).targetEvent(ev).ok($translate.instant('LNG_ACEPTAR')).cancel($translate.instant('LGN_CANCEL')).hasBackdrop(false);
      $mdDialog.show(confirm).then(function () {
        self.deletePais(modelo, index);
      }, function () {
      });
    }
    ;
  }
  function ModalController($uibModalInstance, $translate, $scope, $http, PaisFactory, toastr, titulo, index, scope, handleError) {
    var self = this;
    self.titulo = titulo;
    self.Pais = scope.Pais;
    ;
    self.Paises = scope.Paises;
    self.crearPais = crearPais;
    self.editarPais = editarPais;
    self.cancel = cancel;
    self.scope = scope;
    function crearPais(modelo) {
      PaisFactory.crearPais(modelo).then(function (response) {
        self.Pais = response.data;
        self.Paises.push(response.data);
        cancel();
        toastr.successhall($translate.instant('LNG_CREATESUCS'));
      }, handleError);
    }
    function editarPais(modelo) {
      PaisFactory.editarPais(modelo).then(function (response) {
        self.Paises[index] = response.data;
        cancel();
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
    function cancel() {
      $uibModalInstance.close();
    }
  }
}());
(function () {
  angular.module('app.ubicacion.departamento').controller('DepartamentoController', DepartamentoController);
  DepartamentoController.$inject = [
    'DepartamentoFactory',
    'SelectsFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$translate'
  ];
  function DepartamentoController(DepartamentoFactory, SelectsFactory, $state, $scope, $uibModal, $mdDialog, toastr, $translate) {
    var self = this;
    self.Depts = [];
    self.Dept = {};
    self.CreateOrEditDept = CreateOrEditDept;
    self.showConfirm = showConfirm;
    self.deleteDept = deleteDept;
    getDepts();
    getListas();
    function getDepts() {
      DepartamentoFactory.getDepts().then(function (response) {
        self.Depts = response.data;
      }, handleError);
    }
    function getListas() {
      SelectsFactory.getListas(true, false, false, false, false, false).then(function (response) {
        self.paises = response.data.paises;
      }, handleError);
    }
    function deleteDept(modelo, index) {
      DepartamentoFactory.deleteDept(modelo).then(function (response) {
        self.Depts.splice(index, 1);
        toastr.successhall($translate.instant('LNG_BORRARSUC'));
      }, handleError);
    }
    function CreateOrEditDept(accion, hlndepartamentoid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        titulo = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LNG_DEPART');
      } else if (accion == 'Editar') {
        titulo = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LNG_DEPART');
      }
      if (hlndepartamentoid == null) {
        hlndepartamentoid = 0;
      }
      DepartamentoFactory.getDept(hlndepartamentoid).then(function (response) {
        self.Dept = response.data;
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditDept.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function showConfirm(ev, modelo, index) {
      var confirm = $mdDialog.confirm({
          onComplete: function afterShowAnimation() {
            var $dialog = angular.element(document.querySelector('md-dialog'));
            var $actionsSection = $dialog.find('md-dialog-actions');
            var $cancelButton = $actionsSection.children()[0];
            var $confirmButton = $actionsSection.children()[1];
            angular.element($confirmButton).addClass('md-raised hbtn-success');
            angular.element($cancelButton).addClass('md-raised hbtn-primary');
            $actionsSection.children[0] = $confirmButton;
            $actionsSection.children[1] = $cancelButton;
          }
        }).title($translate.instant('LNG_BORRAR')).targetEvent(ev).ok($translate.instant('LNG_ACEPTAR')).cancel($translate.instant('LGN_CANCEL')).hasBackdrop(false);
      $mdDialog.show(confirm).then(function () {
        self.deleteDept(modelo, index);
      }, function () {
      });
    }
    ;
  }
  function ModalController($uibModalInstance, $translate, $scope, $http, DepartamentoFactory, toastr, titulo, index, scope, handleError) {
    var self = this;
    self.titulo = titulo;
    self.scope = scope;
    self.Dept = scope.Dept;
    self.Depts = scope.Depts;
    self.crearDept = crearDept;
    self.editarDept = editarDept;
    self.cancel = cancel;
    if (self.Dept.hlnpaisid == 0) {
      scope.paises.selected = null;
    } else {
      scope.paises.selected = scope.paises.filter(function (item) {
        return item.Value == self.Dept.hlnpaisid;
      })[0];
    }
    function crearDept(modelo) {
      modelo.hlnpaisid = self.scope.paises.selected.Value;
      DepartamentoFactory.crearDept(modelo).then(function (response) {
        self.Dept = response.data;
        self.Depts.push(response.data);
        cancel();
        toastr.successhall($translate.instant('LNG_CREATESUCS'));
      }, handleError);
    }
    function editarDept(modelo) {
      modelo.hlnpaisid = self.scope.paises.selected.Value;
      DepartamentoFactory.editarDept(modelo).then(function (response) {
        self.Depts[index] = response.data;
        cancel();
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
    function cancel() {
      $uibModalInstance.close();
    }
  }
}());
(function () {
  angular.module('app.ubicacion.ciudad').controller('CiudadController', CiudadController);
  CiudadController.$inject = [
    'CiudadFactory',
    'SelectsFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$translate'
  ];
  function CiudadController(CiudadFactory, SelectsFactory, $state, $scope, $uibModal, $mdDialog, toastr, $translate) {
    var self = this;
    self.Ciudades = [];
    self.Ciudad = {};
    self.CreateOrEditCiudad = CreateOrEditCiudad;
    self.showConfirm = showConfirm;
    self.deleteCiudad = deleteCiudad;
    getCiudades();
    getListas();
    function getCiudades() {
      CiudadFactory.getCiudades().then(function (response) {
        self.Ciudades = response.data;
      }, handleError);
    }
    function getListas() {
      SelectsFactory.getListas(true, true, false, false, false, false).then(function (response) {
        var response = response.data;
        self.paises = response.paises;
        self.departamentos = response.depts;
      }, handleError);
    }
    function deleteCiudad(modelo, index) {
      CiudadFactory.deleteCiudad(modelo).then(function (response) {
        self.Ciudades.splice(index, 1);
        toastr.successhall($translate.instant('LNG_BORRARSUC'));
      }, handleError);
    }
    function CreateOrEditCiudad(accion, hlnciudadid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        titulo = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LNG_CIUDAD');
      } else if (accion == 'Editar') {
        titulo = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LNG_CIUDAD');
      }
      if (hlnciudadid == null) {
        hlnciudadid = 0;
      }
      CiudadFactory.getCiudad(hlnciudadid).then(function (response) {
        self.Ciudad = response.data;
        console.log(self);
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditCiudad.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function showConfirm(ev, modelo, index) {
      var confirm = $mdDialog.confirm({
          onComplete: function afterShowAnimation() {
            var $dialog = angular.element(document.querySelector('md-dialog'));
            var $actionsSection = $dialog.find('md-dialog-actions');
            var $cancelButton = $actionsSection.children()[0];
            var $confirmButton = $actionsSection.children()[1];
            angular.element($confirmButton).addClass('md-raised hbtn-success');
            angular.element($cancelButton).addClass('md-raised hbtn-primary');
            $actionsSection.children[0] = $confirmButton;
            $actionsSection.children[1] = $cancelButton;
          }
        }).title($translate.instant('LNG_BORRAR')).targetEvent(ev).ok($translate.instant('LNG_ACEPTAR')).cancel($translate.instant('LGN_CANCEL')).hasBackdrop(false);
      $mdDialog.show(confirm).then(function () {
        self.deleteCiudad(modelo, index);
      }, function () {
      });
    }
    ;
  }
  function ModalController($uibModalInstance, $translate, $scope, $http, CiudadFactory, toastr, titulo, index, scope, handleError) {
    var self = this;
    self.titulo = titulo;
    self.Ciudad = scope.Ciudad;
    self.Ciudades = scope.Ciudades;
    self.CrearCiudad = CrearCiudad;
    self.editarCiudad = editarCiudad;
    self.cancel = cancel;
    self.scope = scope;
    self.departamentos = [];
    self.Depts = Depts;
    if (self.Ciudad.hlnpaisid == 0) {
      scope.paises.selected = null;
    } else {
      scope.paises.selected = scope.paises.filter(function (item) {
        return item.Value == self.Ciudad.hlnpaisid;
      })[0];
    }
    if (self.Ciudad.hlndepartamentoid == 0) {
      self.departamentos.selected = null;
    } else {
      self.departamentos = scope.departamentos.filter(function (item) {
        return item.Group.Name == self.Ciudad.hlnpaisid;
      });
      self.departamentos.selected = scope.departamentos.filter(function (item) {
        return item.Value == self.Ciudad.hlndepartamentoid;
      })[0];
    }
    function CrearCiudad(modelo) {
      modelo.hlnpaisid = scope.paises.selected.Value;
      modelo.hlndepartamentoid = self.departamentos.selected.Value;
      CiudadFactory.crearCiudad(modelo).then(function (response) {
        self.Ciudad = response.data;
        self.Ciudades.push(response.data);
        cancel();
        toastr.successhall($translate.instant('LNG_CREATESUCS'));
      }, handleError);
    }
    function editarCiudad(modelo) {
      modelo.hlnpaisid = scope.paises.selected.Value;
      modelo.hlndepartamentoid = self.departamentos.selected.Value;
      CiudadFactory.editarCiudad(modelo).then(function (response) {
        self.Ciudades[index] = response.data;
        cancel();
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
    function cancel() {
      $uibModalInstance.close();
    }
    function Depts(key) {
      self.departamentos = scope.departamentos.filter(function (item) {
        return item.Group.Name == key.Value;
      });
    }
  }
}());
(function () {
  angular.module('app.datos').controller('DatosController', DatosController);
  DatosController.$inject = [
    'UsuarioFactory',
    'SelectsFactory',
    '$state',
    '$scope',
    '$window',
    'toastr',
    '$translate'
  ];
  function DatosController(UsuarioFactory, SelectsFactory, $state, $scope, $window, toastr, $translate) {
    var usuario = JSON.parse($window.localStorage.usuario);
    var self = this;
    self.usuario = {};
    self.change = false;
    self.ChangeView = ChangeView;
    self.EditUsuario = EditUsuario;
    self.Changepais = Changepais;
    self.Changedep = Changedep;
    self.Changeciu = Changeciu;
    getListas();
    getUsuario(usuario.hlnusuarioid);
    function getListas() {
      SelectsFactory.getListas(true, true, true, false, false, false).then(function (response) {
        var response = response.data;
        self.paises = response.paises;
        self.depts = response.depts;
        self.ciud = response.ciudades;
        self.ciudadesd = response.ciudades;
        self.departamentos = response.depts;
      }, handleError);
    }
    function getUsuario(hlnusuarioid) {
      UsuarioFactory.getUsuario(hlnusuarioid).then(function (response) {
        var response = response.data;
        self.usuario = response;
      }, handleError);
    }
    function ChangeView() {
      self.change = !self.change;
      self.pais = self.paises.filter(function (item) {
        if (item.Value == self.usuario.hlnpaisid) {
          return item;
        }
      })[0];
      self.dept = self.depts.filter(function (item) {
        if (item.Value == self.usuario.hlndepartamentoid) {
          return item;
        }
      })[0];
      self.ciudad = self.ciud.filter(function (item) {
        if (item.Value == self.usuario.hlnciudadid) {
          return item;
        }
      })[0];
    }
    function handleError(response) {
      console.log(response);
      toastr.errorhall($translate.instant(response.data), 'Error');
    }
    function EditUsuario(modelo) {
      UsuarioFactory.editarUsuario(modelo).then(function (response) {
        var response = response.data;
        if (response.valida == true) {
          self.usuario = response.modelo;
          toastr.successhall($translate.instant('LNG_EDITSUCS'));
        } else {
          response.data = response.msj;
          handleError(response);
        }
      }, handleError);
    }
    function Changepais(key) {
      self.usuario.hlnpaisid = key;
      self.usuario.hlndepartamentoid = null;
      self.usuario.hlnciudadid = null;
      self.ciudadesd = [];
      self.departamentos = self.depts.filter(function (item) {
        return item.Group.Name == key;
      });
    }
    function Changeciu(key) {
      self.usuario.hlnciudadid = key;
    }
    function Changedep(key) {
      self.usuario.hlndepartamentoid = key;
      self.usuario.hlnciudadid = null;
      console.log('key', key);
      self.ciudadesd = self.ciud.filter(function (item) {
        return item.Group.Name == key;
      });
    }
  }
}());
(function () {
  angular.module('app.configuracion').controller('ConfigController', ConfigController);
  ConfigController.$inject = [
    'ConfigFactory',
    '$state',
    '$scope',
    'toastr',
    '$translate'
  ];
  function ConfigController(ConfigFactory, $state, $scope, toastr, $translate) {
    var self = this;
    self.configuracion = {};
    self.EditConfig = EditConfig;
    self.change = false;
    self.ChangeView = ChangeView;
    self.tboton = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LGN_CONFIG_MENU');
    self.sboton = $translate.instant('LGN_GUARDAR') + ' ' + $translate.instant('LGN_CONFIG_MENU');
    getConfig();
    function getConfig() {
      ConfigFactory.getConfig().then(function (response) {
        self.configuracion = response.data;
      }, handleError);
    }
    function ChangeView() {
      self.change = !self.change;
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function EditConfig(modelo) {
      ConfigFactory.putConfig(modelo).then(function (response) {
        self.configuracion = response.data;
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
  }
}());
(function () {
  angular.module('app.progtema').controller('progTemaController', progTemaController);
  progTemaController.$inject = [
    'ProgTemaFactory',
    'SelectsFactory',
    '$state',
    '$scope',
    '$uibModal',
    '$mdDialog',
    'toastr',
    '$filter',
    '$translate'
  ];
  function progTemaController(ProgTemaFactory, SelectsFactory, $state, $scope, $uibModal, $mdDialog, toastr, $filter, $translate) {
    var self = this;
    self.progtemas = [];
    self.progtema = {};
    self.CreateOrEditProgtema = CreateOrEditProgtema;
    self.showConfirm = showConfirm;
    self.deletePrgotema = deletePrgotema;
    getProgtemas();
    getListas();
    function getProgtemas() {
      ProgTemaFactory.getProgTemas().then(function (response) {
        self.progtemas = response.data;
      }, handleError);
    }
    function getListas() {
      SelectsFactory.getListas(false, false, false, true, true, true).then(function (response) {
        var response = response.data;
        self.profesores = response.profesores;
        self.temas = response.temas;
        self.materias = response.materias;
      }, handleError);
    }
    function deletePrgotema(modelo, index) {
      ProgTemaFactory.deleteProgTema(modelo).then(function (response) {
        self.progtemas.splice(index, 1);
        toastr.successhall($translate.instant('LNG_BORRARSUC'));
      }, handleError);
    }
    function CreateOrEditProgtema(accion, hlnprogtemaid, index) {
      var titulo = null;
      if (accion == 'Crear') {
        titulo = $translate.instant('LNG_CREAR') + ' ' + $translate.instant('LGN_CONFIG_MENU');
      } else if (accion == 'Editar') {
        titulo = $translate.instant('LNG_EDITAR') + ' ' + $translate.instant('LGN_CONFIG_MENU');
      }
      if (hlnprogtemaid == null) {
        hlnprogtemaid = 0;
      }
      ProgTemaFactory.getProgTema(hlnprogtemaid).then(function (response) {
        self.progtema = response.data;
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/widgets/app-modals/CreateOrEditProgTema.html',
            controller: ModalController,
            controllerAs: '$ctrl',
            windowClass: 'u-modalPosition',
            size: 'md',
            resolve: {
              titulo: function () {
                return titulo;
              },
              index: function () {
                return index;
              },
              scope: function () {
                return self;
              },
              handleError: function () {
                return handleError;
              }
            }
          });
        modalInstance.result.then(function (data) {
        }, function () {
        });
      }, handleError);
    }
    function handleError(response) {
      toastr.errorhall($translate.instant(response.data));
    }
    function showConfirm(ev, modelo, index) {
      var confirm = $mdDialog.confirm({
          onComplete: function afterShowAnimation() {
            var $dialog = angular.element(document.querySelector('md-dialog'));
            var $actionsSection = $dialog.find('md-dialog-actions');
            var $cancelButton = $actionsSection.children()[0];
            var $confirmButton = $actionsSection.children()[1];
            angular.element($confirmButton).addClass('md-raised hbtn-success');
            angular.element($cancelButton).addClass('md-raised hbtn-primary');
            $actionsSection.children[0] = $confirmButton;
            $actionsSection.children[1] = $cancelButton;
          }
        }).title($translate.instant('LNG_BORRAR')).targetEvent(ev).ok($translate.instant('LNG_ACEPTAR')).cancel($translate.instant('LGN_CANCEL')).hasBackdrop(false);
      $mdDialog.show(confirm).then(function () {
        self.deletePrgotema(modelo, index);
      }, function () {
      });
    }
    ;
  }
  function ModalController($uibModalInstance, $translate, $scope, $http, ProgTemaFactory, $filter, toastr, titulo, index, scope, handleError) {
    var self = this;
    self.titulo = titulo;
    self.progtema = scope.progtema;
    self.progtemas = scope.progtemas;
    self.editarProgTema = editarProgTema;
    self.crearProgTema = crearProgTema;
    self.cancel = cancel;
    self.scope = scope;
    self.Temas = Temas;
    self.temas = [];
    if (self.progtema.hlntemaid == 0) {
      self.scope.temas.selected = null;
      self.scope.materias.selected = null;
    } else {
      self.temas.selected = scope.temas.filter(function (item) {
        return item.Value == self.progtema.hlntemaid;
      })[0];
      self.scope.materias.selected = scope.materias.filter(function (item) {
        return item.Value == self.temas.selected.Group.Name;
      })[0];
      self.temas = scope.temas.filter(function (item) {
        return item.Group.Name == self.scope.materias.selected.Value;
      });
      self.temas.selected = scope.temas.filter(function (item) {
        return item.Value == self.progtema.hlntemaid;
      })[0];
      try {
        self.progtema.hi = new Date('Thu, 01 Jan 1970 ' + self.progtema.hi);
      } catch (e) {
      }
      try {
        self.progtema.hf = new Date('Thu, 01 Jan 1970 ' + self.progtema.hf);
      } catch (e) {
      }
    }
    if (self.progtema.hlnprofesorid == 0) {
      self.scope.profesores.selected = null;
    } else {
      self.scope.profesores.selected = scope.profesores.filter(function (item) {
        return item.Value == self.progtema.hlnprofesorid;
      })[0];
    }
    function crearProgTema(modelo) {
      modelo.hlnmateriaid = self.scope.materias.selected.Value;
      modelo.hlntemaid = self.temas.selected.Value;
      modelo.hlnprofesorid = self.scope.profesores.selected.Value;
      try {
        modelo.hi = $filter('date')(modelo.hi, 'HH:mm:ss');
      } catch (e) {
      }
      try {
        modelo.hf = $filter('date')(modelo.hf, 'HH:mm:ss');
      } catch (e) {
      }
      ProgTemaFactory.crearProgTema(modelo).then(function (response) {
        self.progtema = response.data;
        self.progtemas.push(response.data);
        cancel();
        toastr.successhall($translate.instant('LNG_CREATESUCS'));
      }, handleError);
    }
    function editarProgTema(modelo) {
      modelo.hlnmateriaid = self.scope.materias.selected.Value;
      modelo.hlntemaid = self.temas.selected.Value;
      modelo.hlnprofesorid = self.scope.profesores.selected.Value;
      try {
        modelo.hi = $filter('date')(modelo.hi, 'HH:mm:ss');
      } catch (e) {
      }
      try {
        modelo.hf = $filter('date')(modelo.hf, 'HH:mm:ss');
      } catch (e) {
      }
      ProgTemaFactory.editarProgTema(modelo).then(function (response) {
        self.progtemas[index] = response.data;
        cancel();
        toastr.successhall($translate.instant('LNG_EDITSUCS'));
      }, handleError);
    }
    function cancel() {
      $uibModalInstance.close();
    }
    function Temas(key) {
      self.temas = scope.temas.filter(function (item) {
        return item.Group.Name == key.Value;
      });
    }
  }
}());
(function () {
  angular.module('app.misclases').controller('misclasesController', misclasesController);
  misclasesController.$inject = [
    'claseFactory',
    '$window',
    '$scope'
  ];
  function misclasesController(claseFactory, $window, $scope) {
    var self = this;
    self.clases = [];
    var usuario = JSON.parse($window.localStorage.usuario);
    getClases();
    function getClases() {
      claseFactory.getClasesAlumnos(usuario.hlnusuarioid, false).then(function (response) {
        self.clases = response.data;
        console.log(self.clases);
      }, handleError);
    }
    function handleError() {
    }
  }
}());
(function () {
  angular.module('app.clasesprog').controller('ClasesprogController', ClasesprogController);
  ClasesprogController.$inject = [
    'claseFactory',
    'ClasesprogFactory',
    '$state',
    '$scope',
    'toastr',
    '$translate',
    '$window'
  ];
  function ClasesprogController(claseFactory, ClasesprogFactory, $state, $scope, toastr, $translate, $window) {
    var self = this;
    self.clases = [];
    var usuario = JSON.parse($window.localStorage.usuario);
    getClases();
    function getClases() {
      claseFactory.getClasesAlumnos(usuario.hlnusuarioid, true).then(function (response) {
        self.clases = response.data;
        console.log(self.clases);
      });
    }
  }
}());
(function () {
  angular.module('app.clasesprofesor').controller('ClasesProfesorController', ClasesProfesorController);
  ClasesProfesorController.$inject = [
    'claseFactory',
    'ClasesProfesorFactory',
    '$state',
    '$scope',
    'toastr',
    '$translate',
    '$window'
  ];
  function ClasesProfesorController(claseFactory, ClasesProfesorFactory, $state, $scope, toastr, $translate, $window) {
    var self = this;
    self.clases = [];
    var usuario = JSON.parse($window.localStorage.usuario);
    getClases();
    function getClases() {
      claseFactory.getClasesProfesor(usuario.hlnusuarioid).then(function (response) {
        self.clases = response.data;
        console.log(self.clases);
      });
    }
  }
}());